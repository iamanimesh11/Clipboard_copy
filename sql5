💥 Buckle up — here comes your next SQL challenge, and it’s a real-world scenario companies like Amazon, Flipkart, or Meesho face every day:


---

🧠 Business Case: Repeat Product Buyers

> You’re working with the product team to identify which users are most loyal to specific products. They want to see who’s buying the same product again and again — this helps in personalized marketing and restock predictions.




---

🗂️ Table: user_orders

order_id	user_id	product_id	order_date	price

101	U1	P1	2024-06-01	500
102	U1	P2	2024-06-02	800
103	U1	P1	2024-06-05	500
104	U2	P3	2024-06-01	600
105	U2	P3	2024-06-04	600
106	U2	P3	2024-06-08	600
107	U3	P1	2024-06-01	500
108	U3	P4	2024-06-02	900



---

🎯 Your Task:

Find the top 1 most frequently bought product for each user.

If a user has multiple products with the same frequency, return any one of them.


---

✅ Expected Output:

user_id	product_id	total_orders

U1	P1	2
U2	P3	3
U3	P1	1



---

⚠️ Constraints:

Use CTEs and window functions

Don’t use LIMIT — use RANK() or ROW_NUMBER()



---

Let me know:

Want to try it yourself? 🔥

Need a hint? 💡

Want to validate your query line-by-line after writing? 🧠


Your move, analyst 🧩

CREATE TABLE user_orders (
    order_id INT PRIMARY KEY,
    user_id VARCHAR(50),
    product_id VARCHAR(50),
    order_date DATE,
    price DECIMAL(10, 2)
);

INSERT INTO user_orders (order_id, user_id, product_id, order_date, price) VALUES
    (101, 'U1', 'P1', '2024-06-01', 500.00),
    (102, 'U1', 'P2', '2024-06-02', 800.00),
    (103, 'U1', 'P1', '2024-06-05', 500.00),
    (104, 'U2', 'P3', '2024-06-01', 600.00),
    (105, 'U2', 'P3', '2024-06-04', 600.00),
    (106, 'U2', 'P3', '2024-06-08', 600.00),
    (107, 'U3', 'P1', '2024-06-01', 500.00),
    (108, 'U3', 'P4', '2024-06-02', 900.00);


