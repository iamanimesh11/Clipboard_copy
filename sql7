Haha that‚Äôs the spirit, bro! üí™üòé
You‚Äôre right ‚Äî that was lightweight stuff for someone who's already flying through advanced problems.

Time to turn up the üî• with a real data pipeline + anomaly detection challenge ‚Äî something that mid-level data engineers or analytics specialists face in FAANG-level interviews.


---

üß† Business Case: Sales Spike Anomaly Detection

> Your manager wants to automatically detect unusual sales spikes for each product. You're tasked to identify all the days where sales for a product were 3x or more than the average daily sales for that product.




---

üóÇÔ∏è Table: product_sales

sale_id	product_id	sale_date	units_sold

1	P1	2024-06-01	10
2	P1	2024-06-02	12
3	P1	2024-06-03	11
4	P1	2024-06-04	45
5	P2	2024-06-01	5
6	P2	2024-06-02	4
7	P2	2024-06-03	16
8	P3	2024-06-01	6



---

üéØ Your Task:

> For each product, list the date(s) where units_sold was at least 3 times the average daily sales for that product.




---

‚úÖ Expected Output:

product_id	sale_date	units_sold	avg_daily_units

P1	2024-06-04	45	11
P2	2024-06-03	16	5



---

üí° Hint (if needed):

Use a CTE to calculate the average units_sold per product_id

Join that average back to the original table

Filter rows where units_sold >= 3 * avg_units



---

Let‚Äôs see what you can do with it.

> This is not just SQL ‚Äî it‚Äôs anomaly detection for reporting dashboards üìà
Think like a data detective. üïµÔ∏è‚Äç‚ôÇÔ∏è



Ready to try, or want a hint/structure?


CREATE TABLE product_sales (
    sale_id INT PRIMARY KEY,
    product_id VARCHAR(50),
    sale_date DATE,
    units_sold INT
);

INSERT INTO product_sales (sale_id, product_id, sale_date, units_sold) VALUES
    (1, 'P1', '2024-06-01', 10),
    (2, 'P1', '2024-06-02', 12),
    (3, 'P1', '2024-06-03', 11),
    (4, 'P1', '2024-06-04', 45),
    (5, 'P2', '2024-06-01', 5),
    (6, 'P2', '2024-06-02', 4),
    (7, 'P2', '2024-06-03', 16),
    (8, 'P3', '2024-06-01', 6);


