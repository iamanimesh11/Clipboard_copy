âœ… Question 1 :
"Write a SQL query to find, for each customer, the product they have purchased the most frequently (only considering products bought more than twice). If there are ties, return all top products for that customer."

ðŸ’¡ Solution: 
with cte as(
select count(customer_id) as product_bought_often ,customer_id,
        product_name
      from customer_orders 
      group by product_name ,customer_id
      having product_bought_often >2
      )
,
cte2 as ( select product_bought_often,customer_id,product_name,
rank() over ( partition by customer_id  order by product_bought_often desc) as rn
from cte)

select * from cte2
where rn=1


Perfect! Letâ€™s extend the **SQL problem set** to a complete workbook with **10 advanced questions** on user login behavior, retention, and streaks. Each question will have the SQL solution and a brief explanation.

---

## **Extended SQL Problem Set: User Logins & Retention**

### **Base Table**

```sql
CREATE TABLE user_logins (
    login_id INT PRIMARY KEY,
    user_id VARCHAR(50),
    login_date DATE
);

INSERT INTO user_logins (login_id, user_id, login_date) VALUES
(1, 'U1', '2024-06-01'),
(2, 'U1', '2024-06-02'),
(3, 'U1', '2024-06-03'),
(4, 'U1', '2024-06-04'),
(5, 'U1', '2024-06-05'),
(6, 'U1', '2024-06-06'),
(7, 'U1', '2024-06-07'),
(8, 'U2', '2024-06-01'),
(9, 'U2', '2024-06-03'),
(10, 'U3', '2024-06-10'),
(11, 'U3', '2024-06-11'),
(12, 'U3', '2024-06-12'),
(13, 'U3', '2024-06-13'),
(14, 'U3', '2024-06-14'),
(15, 'U3', '2024-06-15'),
(16, 'U3', '2024-06-16');
```

---

### **Question 1: Longest login streak per user**

**Problem:** Find the maximum consecutive login days for each user.

**Answer:**

```sql
WITH base AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streaks AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS streak_base
    FROM base
),
streak_lengths AS (
    SELECT user_id, COUNT(*) AS streak_length
    FROM streaks
    GROUP BY user_id, streak_base
)
SELECT user_id, MAX(streak_length) AS longest_streak
FROM streak_lengths
GROUP BY user_id;
```

**Explanation:** Assigns row numbers to identify consecutive dates; grouping by `streak_base` calculates streak lengths.

---

### **Question 2: Start date of first 7-day streak**

**Problem:** Find the start date of the first 7-day streak per user.

**Answer:**

```sql
WITH base AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streaks AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS streak_base
    FROM base
),
streak_groups AS (
    SELECT user_id, streak_base, COUNT(*) AS streak_length, MIN(login_date) AS streak_start
    FROM streaks
    GROUP BY user_id, streak_base
    HAVING COUNT(*) >= 7
)
SELECT user_id, MIN(streak_start) AS first_7_day_streak_start
FROM streak_groups
GROUP BY user_id;
```

---

### **Question 3: Count of 7-day streaks per user**

**Problem:** Count how many streaks of 7 or more days each user has.

**Answer:**

```sql
WITH base AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streaks AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS streak_base
    FROM base
),
streak_groups AS (
    SELECT user_id, streak_base, COUNT(*) AS streak_length
    FROM streaks
    GROUP BY user_id, streak_base
    HAVING COUNT(*) >= 7
)
SELECT user_id, COUNT(*) AS number_of_7_day_streaks
FROM streak_groups
GROUP BY user_id;
```

---

### **Question 4: Average streak length per user**

**Problem:** Calculate the average streak length for each user.

**Answer:**

```sql
WITH base AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streaks AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS streak_base
    FROM base
),
streak_groups AS (
    SELECT user_id, streak_base, COUNT(*) AS streak_length
    FROM streaks
    GROUP BY user_id, streak_base
)
SELECT user_id, ROUND(AVG(streak_length), 2) AS avg_streak_length
FROM streak_groups
GROUP BY user_id;
```

---

### **Question 5: Gap between top 2 streaks**

**Problem:** Find the number of days between the longest streak end and the second-longest streak start.

**Answer:**

```sql
WITH streaks AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streak_base AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS base
    FROM streaks
),
streak_lengths AS (
    SELECT user_id, base, COUNT(*) AS streak_len, MIN(login_date) AS start_date, MAX(login_date) AS end_date
    FROM streak_base
    GROUP BY user_id, base
),
ranked AS (
    SELECT *, RANK() OVER (PARTITION BY user_id ORDER BY streak_len DESC) AS rnk
    FROM streak_lengths
)
SELECT user_id,
       MAX(CASE WHEN rnk = 1 THEN end_date END) AS longest_end,
       MAX(CASE WHEN rnk = 2 THEN start_date END) AS second_start,
       DATEDIFF(MAX(CASE WHEN rnk = 2 THEN start_date END), MAX(CASE WHEN rnk = 1 THEN end_date END)) AS gap_days
FROM ranked
GROUP BY user_id
HAVING COUNT(*) >= 2;
```

---

### **Question 6: Users who dropped off after 7-day streak**

**Problem:** Identify users who had a streak of â‰¥7 days and did not log in for the next 3 days.

**Answer:**

```sql
WITH streaks AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streak_base AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS base
    FROM streaks
),
user_streaks AS (
    SELECT user_id, base, COUNT(*) AS streak_len, MAX(login_date) AS streak_end
    FROM streak_base
    GROUP BY user_id, base
    HAVING COUNT(*) >= 7
),
next_logins AS (
    SELECT s.user_id, s.streak_end, MIN(l.login_date) AS next_login
    FROM user_streaks s
    LEFT JOIN user_logins l 
        ON s.user_id = l.user_id AND l.login_date > s.streak_end
    GROUP BY s.user_id, s.streak_end
)
SELECT user_id, streak_end, next_login, DATEDIFF(next_login, streak_end) AS gap_days
FROM next_logins
WHERE next_login IS NULL OR DATEDIFF(next_login, streak_end) > 3;
```

---

### **Question 7: Day 1, Day 3, Day 7 Retention**

**Problem:** For each signup date, calculate the percentage of users returning on day 1, 3, and 7.

**Assume a table:**

```sql
signups(user_id, signup_date)
```

**Answer:**

```sql
SELECT s.signup_date,
       ROUND(SUM(u.login_day = 1) / COUNT(*), 2) AS day1_retention,
       ROUND(SUM(u.login_day = 3) / COUNT(*), 2) AS day3_retention,
       ROUND(SUM(u.login_day = 7) / COUNT(*), 2) AS day7_retention
FROM signups s
LEFT JOIN (
    SELECT l.user_id, DATEDIFF(l.login_date, s.signup_date) AS login_day
    FROM user_logins l
    JOIN signups s ON l.user_id = s.user_id
) u ON s.user_id = u.user_id
GROUP BY s.signup_date;
```

---

### **Question 8: Segment users by behavior tier**

**Problem:** Classify users into tiers based on maximum streak:

* `Addicted` â‰¥7 days
* `Engaged` 3â€“6 days
* `Casual` <3 days

**Answer:**

```sql
WITH user_streaks AS (
    SELECT user_id, COUNT(*) AS streak_length
    FROM (
        SELECT user_id, login_date,
               ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
        FROM user_logins
    ) base
    GROUP BY user_id, login_date - INTERVAL rn DAY
),
max_streaks AS (
    SELECT user_id, MAX(streak_length) AS max_streak
    FROM user_streaks
    GROUP BY user_id
)
SELECT user_id, max_streak,
       CASE 
           WHEN max_streak >= 7 THEN 'Addicted'
           WHEN max_streak >= 3 THEN 'Engaged'
           ELSE 'Casual'
       END AS user_tier
FROM max_streaks;
```

---

### **Question 9: Calendar-style heatmap**

**Problem:** Show whether a user logged in on each day from `2024-06-01` to `2024-06-07`.

**Answer:**

```sql
SELECT user_id,
       MAX(login_date = '2024-06-01') AS d1,
       MAX(login_date = '2024-06-02') AS d2,
       MAX(login_date = '2024-06-03') AS d3,
       MAX(login_date = '2024-06-04') AS d4,
       MAX(login_date = '2024-06-05') AS d5,
       MAX(login_date = '2024-06-06') AS d6,
       MAX(login_date = '2024-06-07') AS d7
FROM user_logins
GROUP BY user_id;
```

---

### **Question 10: Users with at least one streak â‰¥5 days**

**Problem:** List users who had **any streak of 5 days or longer**.

**Answer:**

```sql
WITH streaks AS (
    SELECT user_id, login_date,
           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY login_date) AS rn
    FROM user_logins
),
streak_base AS (
    SELECT user_id, login_date, login_date - INTERVAL rn DAY AS base
    FROM streaks
),
streak_lengths AS (
    SELECT user_id, COUNT(*) AS streak_len
    FROM streak_base
    GROUP BY user_id, base
)
SELECT DISTINCT user_id
FROM streak_lengths
WHERE streak_len >= 5;
```



âœ… **Summary Table of All 10 Questions**

| #  | Question                    | Key SQL Concept                              |
| -- | --------------------------- | -------------------------------------------- |
| 1  | Longest streak per user     | ROW\_NUMBER + streak anchor                  |
| 2  | First 7-day streak start    | MIN(login\_date) + HAVING COUNT(\*) >=7      |
| 3  | Number of 7-day streaks     | GROUP BY streak\_base + HAVING COUNT(\*) >=7 |
| 4  | Average streak length       | AVG(count(\*))                               |
| 5  | Gap between top 2 streaks   | RANK() + DATEDIFF                            |
| 6  | Drop-off after 7-day streak | LEFT JOIN + DATEDIFF                         |
| 7  | Day 1/3/7 retention         | DATEDIFF(joined with signups)                |
| 8  | User behavior tier          | MAX(streak\_length) + CASE WHEN              |
| 9  | Calendar heatmap            | Conditional aggregation MAX()                |
| 10 | Users with streak â‰¥5        | DISTINCT + HAVING COUNT(\*)                  |


