Perfect â€” letâ€™s break it down step by step using multiple CTEs, so itâ€™s easier to follow.


---

ðŸŽ¯ Goal Reminder

We want to swap every two rows in a SELECT, based on a specific order (e.g., id ascending).


---

ðŸ§± Step-by-Step Using CTEs

âœ… Step 1: Add Row Numbers for Ordering

WITH numbered AS (
  SELECT
    id,
    val,
    ROW_NUMBER() OVER (ORDER BY id) AS rn
  FROM nums
)

This assigns a ROW_NUMBER() to each row. So if your table is:

id	val

1	10
2	20
3	30
4	40
5	50


You now get:

id	val	rn

1	10	1
2	20	2
3	30	3
4	40	4
5	50	5



---

âœ… Step 2: Create CTEs for Odd and Even Rows

Split the rows by their row number parity:

, odd_rows AS (
  SELECT rn, id, val FROM numbered WHERE MOD(rn, 2) = 1
),
even_rows AS (
  SELECT rn, id, val FROM numbered WHERE MOD(rn, 2) = 0
)


---

âœ… Step 3: Swap Values by Joining Odd and Even Rows

Now match each odd row with the next even row (and vice versa):

, swapped_pairs AS (
  SELECT
    o.id AS id1,
    e.val AS val1,
    e.id AS id2,
    o.val AS val2
  FROM odd_rows o
  LEFT JOIN even_rows e ON o.rn + 1 = e.rn
)

Now you'll get something like:

id1	val1	id2	val2

1	20	2	10
3	40	4	30
5	NULL	NULL	50



---

âœ… Step 4: Flatten Back Into Rows

Now combine these into a single row list with swapped values:

, flattened AS (
  SELECT id1 AS id, val1 AS val FROM swapped_pairs
  UNION ALL
  SELECT id2 AS id, val2 AS val FROM swapped_pairs WHERE id2 IS NOT NULL
)


---

âœ… Final SELECT

SELECT id, val
FROM flattened
ORDER BY id;


---

ðŸ§© Full Query Together

WITH numbered AS (
  SELECT
    id,
    val,
    ROW_NUMBER() OVER (ORDER BY id) AS rn
  FROM nums
),
odd_rows AS (
  SELECT rn, id, val FROM numbered WHERE MOD(rn, 2) = 1
),
even_rows AS (
  SELECT rn, id, val FROM numbered WHERE MOD(rn, 2) = 0
),
swapped_pairs AS (
  SELECT
    o.id AS id1,
    e.val AS val1,
    e.id AS id2,
    o.val AS val2
  FROM odd_rows o
  LEFT JOIN even_rows e ON o.rn + 1 = e.rn
),
flattened AS (
  SELECT id1 AS id, val1 AS val FROM swapped_pairs
  UNION ALL
  SELECT id2 AS id, val2 AS val FROM swapped_pairs WHERE id2 IS NOT NULL
)
SELECT id, val
FROM flattened
ORDER BY id;


---

Let me know if you want to sort by something other than id, or swap more than two at a time (e.g., every 3 rows).

