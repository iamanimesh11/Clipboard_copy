Sure, I understand that you want to separate the CSS and JavaScript code for better organization and structure, especially since you're deploying it to Vercel via a repository.

Here's how you can break your code into three parts:

1. HTML (index.html)

This will be your main HTML file, which includes links to external CSS and JavaScript files.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time GPS Tracker</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Real-Time GPS Tracker</h1>
    <button onclick="startTracking()">Start Tracking</button>
    <div id="map" style="height: 500px;"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="script.js"></script>
</body>
</html>

2. CSS (styles.css)

You can add your custom styles here. For now, it's simple, but you can always expand on it.

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    background-color: #f0f0f0;
}

h1 {
    margin-bottom: 20px;
}

button {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    margin-bottom: 20px;
}

#map {
    width: 100%;
    height: 400px;
    border: 1px solid #ccc;
}

3. JavaScript (script.js)

Here, you'll separate your JavaScript logic for the GPS tracking functionality.

var map, marker;

document.addEventListener("DOMContentLoaded", function () {
    // Initialize the map
    map = L.map('map').setView([0, 0], 13); // Default to 0,0 coordinates

    // Set the map tile layer (this is the background map)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Create a marker for the user's location
    marker = L.marker([0, 0]).addTo(map);
});

function startTracking() {
    if (navigator.geolocation) {
        navigator.geolocation.watchPosition(
            (position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                // Update the marker position
                marker.setLatLng([lat, lon]);

                // Move the map view to the new location
                map.setView([lat, lon], 13);

                // Optionally, send the location to your server
                const data = { lat, lon, id: "mobile_agent_1" };
                fetch("http://192.168.1.4:5001/send_location", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(data),
                }).catch((err) => console.error("Error sending location:", err));
            },
            (err) => console.error("Error getting location:", err),
            { enableHighAccuracy: true }
        );
    } else {
        alert("Geolocation is not supported by this browser.");
    }
}

Project Structure

Hereâ€™s how your project folder structure will look like after organizing the files:

/your-project-folder
    /index.html
    /styles.css
    /script.js
    /assets (optional, for any other media like images, if required)

Deploying to Vercel

1. Initialize a Git repository in your project folder if you haven't already.


2. Push your code to GitHub (create a repository if needed).


3. Connect your GitHub repository to Vercel and deploy.



Important Notes:

1. Ensure your base URL is correct when making the API call in script.js. Make sure you have configured your API endpoint to be accessible from Vercel, and use https:// in the fetch URL.


2. Link files properly: The href="styles.css" and src="script.js" in the HTML should be correctly linked to your respective CSS and JS files.



Now, once you deploy this to Vercel, it should work as intended. The HTML file will link to the external CSS and JS files. The DOMContentLoaded event ensures that the map is initialized only after the DOM is fully loaded, and your geolocation functionality should update the marker position in real-time.

Let me know if this helps or if you encounter any issues!

