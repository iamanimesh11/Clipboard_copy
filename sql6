
🧠 Business Case: Find Duplicate Orders in System

> You're on the data team for an e-commerce company. Sometimes, due to API retries or frontend issues, the same user accidentally places the same order more than once.
---

🗂️ Table: orders

order_id	user_id	product_id	order_date	amount

201	U1	P1	2024-06-01	500
202	U1	P1	2024-06-01	500
203	U1	P2	2024-06-02	800
204	U2	P3	2024-06-03	600
205	U2	P3	2024-06-03	600
206	U3	P4	2024-06-03	900


🎯 Your Task:
> Identify all duplicate orders — defined as orders from the same user, for the same product, on the same date, with the same amount.

✅ Expected Output:

user_id	product_id	order_date	amount	duplicate_count

U1	P1	2024-06-01	500	2
U2	P3	2024-06-03	600	2

> We're not showing individual order_ids — just the group of duplicates and their count.

---

🚀 Constraints:

Use CTEs to structure the query

Use GROUP BY logic to detect duplicates

You can add HAVING to isolate them

---

💡 Hint (if needed later):

Start with:

SELECT user_id, product_id, order_date, amount, COUNT(*) as duplicate_count
FROM orders
GROUP BY ...
HAVING COUNT(*) > 1


CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    user_id VARCHAR(50),
    product_id VARCHAR(50),
    order_date DATE,
    amount DECIMAL(10, 2)
);

INSERT INTO orders (order_id, user_id, product_id, order_date, amount) VALUES
    (201, 'U1', 'P1', '2024-06-01', 500.00),
    (202, 'U1', 'P1', '2024-06-01', 500.00),
    (203, 'U1', 'P2', '2024-06-02', 800.00),
    (204, 'U2', 'P3', '2024-06-03', 600.00),
    (205, 'U2', 'P3', '2024-06-03', 600.00),
    (206, 'U3', 'P4', '2024-06-03', 900.00);


    
with cte as (
select user_id,product_id,count(product_id)
from orders
group by user_id,product_id,order_date,amount
having count(*)>=2
),cte2 as (

select o.user_id,o.product_id,o.order_date,o.amount
from orders o 
join cte c 
on o.user_id=c.user_id and o.product_id=c.product_id
)

select distinct user_id,product_id,order_date,amount
from cte2
